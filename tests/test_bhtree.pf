module test_bhtree
  use pfunit_mod
  use bhtree_mod
  use body_mod
  use node_mod
  use cell_mod
  use bhtree_io_mod
  use constants_mod

  implicit none
  
  integer, parameter :: random_seed = 87562618
  real(prec), parameter :: eps2 = 0.025_prec**2

contains

  @test
  subroutine test_expand_box()
    type(body_ptr), allocatable :: body_array(:)
    integer :: i, n
    type(bhtree) :: tree

    body_array = read_bodies_from_formatted_file("test_files/Plummer-500.in")
    n = size(body_array)

    call tree%make_tree(body_array)
    
    do i = 1, n
       @assertTrue(tree%root%in_cell(body_array(i)%ptr))
    end do
    
  end subroutine test_expand_box

  @test
  subroutine test_eval_center_of_mass()
    type(body_ptr), allocatable :: body_array(:)
    integer :: i, n
    type(bhtree) :: tree
    real(real64) :: analytic_center_of_mass(3)

    body_array = read_bodies_from_formatted_file("test_files/Plummer-500.in")
    n = size(body_array)

    analytic_center_of_mass = center_of_mass(body_array)

    call tree%make_tree(body_array)

    associate(root => tree%root)
      do i = 1, ndims
         @assertEqual(root%pos(i), analytic_center_of_mass(i), tolerance = 10.0_prec * epsilon(1.0_prec))
      end do
    end associate

  contains

    pure function center_of_mass(body_array)
      type(body_ptr), intent(in) :: body_array(:)
      real(real64) :: pos_sum(3), total_mass, center_of_mass(3)
      integer :: i, n
      n = size(body_array)
      pos_sum = 0d0
      total_mass = 0d0        
      do i = 1, n
         associate(b => body_array(i)%ptr)
           pos_sum = pos_sum + b%mass * b%pos
           total_mass = total_mass + b%mass
         end associate
      end do
      center_of_mass = pos_sum / total_mass        
    end function center_of_mass

  end subroutine test_eval_center_of_mass


  @test
  subroutine test_thread_tree()
    ! type(body_ptr), allocatable :: body_array(:)
    ! integer :: i, n, num_bodies, ncells
    ! type(bhtree) :: tree
    ! class(node), pointer :: null_ptr
    ! type(node_ptr) :: p


  end subroutine test_thread_tree


  pure function force(b1, b2) result(acc)
    use iso_fortran_env
    type(body), intent(in) :: b1, b2
    real(real64) :: acc(ndims), dr(ndims), r2, r

    dr = b2%pos - b1%pos
    r2 = dot_product(dr, dr) + eps2
    r = sqrt(r2)

    acc = b2%mass / (r2 * r) * dr
  end function force

  subroutine array_force(body_array)
    use constants_mod
    type(body_ptr), intent(inout) :: body_array(:)
    type(body) :: b1, b2
    integer i, j, n
    real(prec) :: acc(ndims)

    n = size(body_array)

    !$omp parallel do private(i, j, b1, b2) shared(body_array, n)
    do i = 1, n
       b1 = body_array(i)%ptr
       do j = 1, n          
          if (i /= j) then
             b2 = body_array(j)%ptr
             acc = force(b1, b2)
             b1%acc = b1%acc +  acc
          end if
       end do
       body_array(i)%ptr%acc = b1%acc
    end do

  end subroutine array_force


  !*****************************************************************************
  ! Opening angle set to 0.0 so all forces should be calculated exactly
  !  and compare to direct summation
  !*****************************************************************************
  @test
  subroutine test_gravcalc_exact()
    type(body_ptr), allocatable :: body_array(:), body_array2(:)
    integer :: i, n, j
    type(bhtree) :: tree
    character(len=256) :: test_file
    type(body) :: a, b

    test_file = "test_files/Plummer-500.in"

    body_array = read_bodies_from_formatted_file(test_file)
    body_array2 = read_bodies_from_formatted_file(test_file)

    n = size(body_array)

    tree%use_quad = .false.
    tree%bh86 = .true.
    tree%theta = 0.0d0
    tree%quick_scan = .false.
    tree%eps2 = eps2

    call tree%make_tree(body_array)
    call tree%gravcalc()

    call array_force(body_array2)

    do i = 1, n
       a = body_array(i)%ptr
       b = body_array2(i)%ptr
       do j = 1, ndims
          @assertEqual(a%acc(j), b%acc(j), tolerance=epsilon(1.0_prec) * 1e2_prec)           
       end do
    end do

  end subroutine test_gravcalc_exact

  @test
  subroutine test_gravcalc_cells()
    type(body_ptr), allocatable :: body_array(:), body_array2(:)
    integer :: i, n, j
    type(bhtree) :: tree
    character(len=256) :: test_file
    type(body) :: a, b
    real(real64) :: percent_diff

    test_file = "test_files/Plummer-500.in"

    body_array = read_bodies_from_formatted_file(test_file)
    body_array2 = read_bodies_from_formatted_file(test_file)

    n = size(body_array)

    tree%use_quad = .false.
    tree%bh86 = .true.
    tree%theta = 0.25d0
    tree%quick_scan = .false.
    tree%eps2 = eps2

    call tree%make_tree(body_array)     
    call tree%gravcalc()

    call array_force(body_array2)

    do i = 1, n
       a = body_array(i)%ptr
       b = body_array2(i)%ptr       
       do j = 1, ndims
          percent_diff = (b%acc(j) - a%acc(j)) / b%acc(j)
          @assertLessThan(percent_diff, 0.1_prec)           
       end do
    end do

  end subroutine test_gravcalc_cells

  @test
  subroutine test_gravcalc_decreasing_error()
    type(body_ptr), allocatable :: body_array(:), body_array2(:)
    integer :: n
    type(bhtree) :: tree
    character(len=256) :: test_file
    real(real64) :: theta_increment, theta_end, current_error, previous_error

    test_file = "test_files/Plummer-500.in"

    body_array = read_bodies_from_formatted_file(test_file)
    body_array2 = read_bodies_from_formatted_file(test_file)

    n = size(body_array)

    tree%use_quad = .false.
    tree%bh86 = .true.
    tree%theta = 1.0d0
    tree%quick_scan = .false.
    tree%eps2 = eps2
    tree%print_time = .false.

    theta_increment = 0.2
    theta_end = 0d0
    previous_error = 1d16

    call array_force(body_array2)

    do while(tree%theta > theta_end)
       call tree%make_tree(body_array)     
       call tree%gravcalc()
       current_error = cumulative_error(body_array2, body_array)
       @assertLessThan(current_error, previous_error)
       tree%theta = tree%theta - theta_increment
    end do

  end subroutine test_gravcalc_decreasing_error

  @test
  subroutine test_gravcalc_quad()
    type(body_ptr), allocatable :: body_array(:), body_array2(:)
    integer :: n
    type(bhtree) :: tree
    character(len=256) :: test_file
    real(real64) :: quad_error, no_quad_error

    test_file = "test_files/Plummer-500.in"

    body_array = read_bodies_from_formatted_file(test_file)
    body_array2 = read_bodies_from_formatted_file(test_file)

    n = size(body_array)

    tree%use_quad = .true.
    tree%bh86 = .true.
    tree%theta = 1.0d0
    tree%quick_scan = .false.
    tree%eps2 = eps2
    tree%print_time = .false.

    call array_force(body_array2)

    tree%use_quad = .true.
    call tree%make_tree(body_array)     
    call tree%gravcalc()
    quad_error = cumulative_error(body_array2, body_array)

    tree%use_quad = .false.
    call tree%make_tree(body_array)     
    call tree%gravcalc()
    no_quad_error = cumulative_error(body_array2, body_array)

    @assertLessThan(quad_error, no_quad_error)

  end subroutine test_gravcalc_quad

  pure function cumulative_error(body_array_exact, body_array_estimate) result(error)
    type(body_ptr), intent(in) :: body_array_exact(:), body_array_estimate(:)
    real(real64) :: error, diff(3)
    integer :: i, n

    n = size(body_array_exact)
    error = 0d0
    do i = 1, n
       diff = abs(body_array_exact(i)%ptr%acc - body_array_estimate(i)%ptr%acc)
       error = error + sqrt(dot_product(diff, diff))
    end do
  end function cumulative_error


end module test_bhtree
